<Window x:Class="Hybrid.WindowsApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:md="http://materialdesigninxaml.net/winfx/xaml/themes" 
        xmlns:converters="clr-namespace:Hybrid.WindowsApp.Converters"
        xmlns:blazor="clr-namespace:Microsoft.AspNetCore.Components.WebView.Wpf;assembly=Microsoft.AspNetCore.Components.WebView.Wpf"
        xmlns:ib="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:rc="clr-namespace:Web.Core;assembly=Web.Core"
        xmlns:dd="urn:gong-wpf-dragdrop"
        xmlns:local="clr-namespace:Hybrid.WindowsApp"
        mc:Ignorable="d"
        dd:DragDrop.IsDropTarget="True"
        dd:DragDrop.DropHandler="{Binding RelativeSource={RelativeSource Mode=Self}}"
        Title="MemeRepo"
        Height="768" Width="1024" MinHeight="768" MinWidth="715">

    <Window.Style>
        <Style TargetType="{x:Type Window}">
            <Setter Property="WindowChrome.WindowChrome">
                <Setter.Value>
                    <WindowChrome CaptionHeight="35"
                                  CornerRadius="0"
                                  
                                  GlassFrameThickness="0"
                                  NonClientFrameEdges="None"
                                  ResizeBorderThickness="3"
                                  UseAeroCaptionButtons="True">

                    </WindowChrome>
                </Setter.Value>
            </Setter>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Window}">
                        <Border BorderThickness="1,0,1,1" >
                            <ContentPresenter x:Name="CP" Content="{TemplateBinding Content}" Grid.Row="1"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="WindowState" Value="Normal">
                                <Setter Property="Margin" TargetName="CP" Value="0"/>
                            </Trigger>
                            <Trigger Property="WindowState" Value="Maximized">
                                <Setter Property="Margin" TargetName="CP" Value="8,10,10,10"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

        </Style>
    </Window.Style>

    <Window.Resources>

        <converters:WindowStateToWindowsStateConverter x:Key="wdtwd"/>

        <Style x:Key="MinimizeWindowButton" TargetType="{x:Type Button}">
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Name="ButtonBorder"
                            Background="Transparent"
                            Height="20" Width="20">
                            <md:PackIcon Name="Icon" Kind="HorizontalLine"
                                     Width="20" Height="20"
                                     VerticalAlignment="Center"
                                     HorizontalAlignment="Center"
                                     Margin="0,10,0,0"/>

                            <ib:Interaction.Triggers>
                                <ib:EventTrigger EventName="MouseLeftButtonDown">
                                    <ib:ChangePropertyAction PropertyName="WindowState" Value="Minimized"
                                                          TargetObject="{Binding RelativeSource={RelativeSource
                                                                                 Mode=FindAncestor,
                                                                                 AncestorType=Window}}" />
                                </ib:EventTrigger>
                            </ib:Interaction.Triggers>

                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Foreground" Value="{DynamicResource StandartLightColor2}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="False">
                                <Setter Property="Foreground" Value="{DynamicResource StandartLightColor}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

        </Style>

        <Style x:Key="ResizeWindowButton" TargetType="{x:Type Button}">
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Name="ButtonBorder"
                            Background="Transparent"
                            Height="20" Width="20">
                            <md:PackIcon Name="Icon"
                                     RenderTransformOrigin="0.5,0.5"
                                     Width="20" Height="20"
                                     VerticalAlignment="Center"
                                     HorizontalAlignment="Center"
                                     Margin="0,0,0,0">
                                <md:PackIcon.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform/>
                                        <RotateTransform Angle="-180"/>
                                        <TranslateTransform/>
                                    </TransformGroup>
                                </md:PackIcon.RenderTransform>
                            </md:PackIcon>

                            <ib:Interaction.Triggers>
                                <ib:EventTrigger EventName="MouseLeftButtonDown">
                                    <ib:ChangePropertyAction PropertyName="WindowState" Value="{Binding RelativeSource={RelativeSource
                                                  Mode=FindAncestor,
                                                  AncestorType=Window}, Path=WindowState, Converter={StaticResource wdtwd}}"
                                                        TargetObject="{Binding RelativeSource={RelativeSource
                                                                              Mode=FindAncestor,
                                                                              AncestorType=Window}}" />
                                </ib:EventTrigger>
                            </ib:Interaction.Triggers>

                        </Border>
                        <ControlTemplate.Triggers>
                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,
                                                       AncestorType=Window}, Path=WindowState}"  Value="Normal">
                                <Setter TargetName="Icon" Property="Kind" Value="CropSquare"/>
                                <Setter TargetName="Icon" Property="Margin" Value="0,0,0,0"/>
                                <Setter TargetName="Icon" Property="Width" Value="20"/>
                                <Setter TargetName="Icon" Property="Height" Value="20"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,
                                                       AncestorType=Window}, Path=WindowState}"  Value="Maximized">
                                <Setter TargetName="Icon" Property="Kind" Value="ImageFilterNone"/>
                                <Setter TargetName="Icon" Property="Margin" Value="0,0,0,0"/>
                                <Setter TargetName="Icon" Property="Width" Value="17"/>
                                <Setter TargetName="Icon" Property="Height" Value="17"/>
                            </DataTrigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Foreground" Value="{DynamicResource StandartLightColor2}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="False">
                                <Setter Property="Foreground" Value="{DynamicResource StandartLightColor}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

        </Style>

        <Style x:Key="CloseWindowButton" TargetType="{x:Type Button}">
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Name="ButtonBorder"
                            Background="Transparent"
                            Height="20" Width="20">
                            <md:PackIcon Name="Icon" Kind="Close"
                                     Width="25" Height="20"
                                     VerticalAlignment="Center"
                                     HorizontalAlignment="Center"
                                     Margin="0"/>

                            <ib:Interaction.Triggers>
                                <ib:EventTrigger EventName="MouseLeftButtonDown">
                                    <ib:CallMethodAction MethodName="Close"
                           TargetObject="{Binding RelativeSource={RelativeSource
                                                  Mode=FindAncestor,
                                                  AncestorType=Window}}" />
                                </ib:EventTrigger>
                            </ib:Interaction.Triggers>

                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Foreground" Value="Red"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="False">
                                <Setter Property="Foreground" Value="{DynamicResource StandartLightColor}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

        </Style>

    </Window.Resources>

    <Grid Background="{DynamicResource GrayLVL3}"
          >
        <Grid Height="20" VerticalAlignment="Top" Background="{StaticResource GrayLVL4}">
            <StackPanel Orientation="Horizontal" HorizontalAlignment="Right">
                <Button x:Name="MinimizeButton" WindowChrome.IsHitTestVisibleInChrome="True" Style="{StaticResource MinimizeWindowButton}"/>
                <Button x:Name="ResizeButton" WindowChrome.IsHitTestVisibleInChrome="True" Style="{StaticResource ResizeWindowButton}"/>
                <Button x:Name="CloseButton" WindowChrome.IsHitTestVisibleInChrome="True" Style="{StaticResource CloseWindowButton}"/>
            </StackPanel>
        </Grid>
        <blazor:BlazorWebView HostPage="wwwroot\index.html"
                              Services="{DynamicResource services}"
                              Margin="0,20,0,0" Background="{DynamicResource GrayLVL3}">
            <blazor:BlazorWebView.RootComponents>
                <blazor:RootComponent Selector="#app" x:Name="BlazorRootComponent" ComponentType="{x:Type rc:App}"   />
            </blazor:BlazorWebView.RootComponents>
        </blazor:BlazorWebView>
    </Grid>
    
</Window>
