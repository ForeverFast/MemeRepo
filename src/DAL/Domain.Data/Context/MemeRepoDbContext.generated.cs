// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using Domain.Core.Models.Base;
using LinqToDB;
using LinqToDB.Configuration;
using LinqToDB.Data;
using LinqToDB.Mapping;
using System;
using System.Collections.Generic;

#pragma warning disable 1573, 1591
#nullable enable

namespace Domain.Data.Context
{
	public partial class MemeRepoDbContext : DataConnection
	{
		public MemeRepoDbContext()
		{
			InitDataContext();
		}

		public MemeRepoDbContext(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		public MemeRepoDbContext(LinqToDBConnectionOptions<MemeRepoDbContext> options)
			: base(options)
		{
			InitDataContext();
		}

		partial void InitDataContext();

		public ITable<VersionInfo> VersionInfos => this.GetTable<VersionInfo>();
		public ITable<Tag>         Tags         => this.GetTable<Tag>();
		public ITable<Folder>      Folders      => this.GetTable<Folder>();
		public ITable<FolderTag>   FolderTags   => this.GetTable<FolderTag>();
		public ITable<Meme>        Memes        => this.GetTable<Meme>();
		public ITable<MemeTag>     MemeTags     => this.GetTable<MemeTag>();
	}

	[Table("VersionInfo")]
	public class VersionInfo : DomainEntity
	{
		[Column("Version"    )] public long      Version     { get; set; } // integer
		[Column("AppliedOn"  )] public DateTime? AppliedOn   { get; set; } // datetime
		[Column("Description")] public string?   Description { get; set; } // text(max)
	}

	[Table("Tags")]
	public class Tag : DomainEntity
	{
		[Column("Id"       , IsPrimaryKey = true )] public Guid     Id        { get; set; } // uniqueidentifier
		[Column("CreatedAt"                      )] public DateTime CreatedAt { get; set; } // datetime
		[Column("Title"    , CanBeNull    = false)] public string   Title     { get; set; } = null!; // text(max)

		#region Associations
		/// <summary>
		/// FK_FolderTags_0_0 backreference
		/// </summary>
		[Association(ThisKey = nameof(Id), OtherKey = nameof(FolderTag.TagId))]
		public List<FolderTag> FolderTags { get; set; } = null!;

		/// <summary>
		/// FK_MemeTags_0_0 backreference
		/// </summary>
		[Association(ThisKey = nameof(Id), OtherKey = nameof(MemeTag.TagId))]
		public List<MemeTag> MemeTags { get; set; } = null!;
		#endregion
	}

	[Table("Folders")]
	public class Folder : DomainEntity
	{
		[Column("Id"            , IsPrimaryKey = true )] public Guid     Id             { get; set; } // uniqueidentifier
		[Column("CreatedAt"                           )] public DateTime CreatedAt      { get; set; } // datetime
		[Column("UpdatedAt"                           )] public DateTime UpdatedAt      { get; set; } // datetime
		[Column("Title"         , CanBeNull    = false)] public string   Title          { get; set; } = null!; // text(max)
		[Column("Description"                         )] public string?  Description    { get; set; } // text(max)
		[Column("Path"          , CanBeNull    = false)] public string   Path           { get; set; } = null!; // text(max)
		[Column("Position"                            )] public long     Position       { get; set; } // integer
		[Column("ParentFolderId"                      )] public Guid?    ParentFolderId { get; set; } // uniqueidentifier

		#region Associations
		/// <summary>
		/// FK_Folders_0_0
		/// </summary>
		[Association(ThisKey = nameof(ParentFolderId), OtherKey = nameof(Id))]
		public Folder? ParentFolder { get; set; }

		/// <summary>
		/// FK_Folders_0_0 backreference
		/// </summary>
		[Association(ThisKey = nameof(Id), OtherKey = nameof(ParentFolderId))]
		public List<Folder> Folders { get; set; } = null!;

		/// <summary>
		/// FK_FolderTags_1_0 backreference
		/// </summary>
		[Association(ThisKey = nameof(Id), OtherKey = nameof(FolderTag.FolderId))]
		public List<FolderTag> FolderTags { get; set; } = null!;

		/// <summary>
		/// FK_Memes_0_0 backreference
		/// </summary>
		[Association(ThisKey = nameof(Id), OtherKey = nameof(Meme.ParentFolderId))]
		public List<Meme> Memes { get; set; } = null!;
		#endregion
	}

	[Table("FolderTags")]
	public class FolderTag : DomainEntity
	{
		[Column("Id"      , IsPrimaryKey = true)] public Guid Id       { get; set; } // uniqueidentifier
		[Column("FolderId"                     )] public Guid FolderId { get; set; } // uniqueidentifier
		[Column("TagId"                        )] public Guid TagId    { get; set; } // uniqueidentifier

		#region Associations
		/// <summary>
		/// FK_FolderTags_0_0
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(TagId), OtherKey = nameof(Context.Tag.Id))]
		public Tag Tag { get; set; } = null!;

		/// <summary>
		/// FK_FolderTags_1_0
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(FolderId), OtherKey = nameof(Context.Folder.Id))]
		public Folder Folder { get; set; } = null!;
		#endregion
	}

	[Table("Memes")]
	public class Meme : DomainEntity
	{
		[Column("Id"            , IsPrimaryKey = true )] public Guid     Id             { get; set; } // uniqueidentifier
		[Column("CreatedAt"                           )] public DateTime CreatedAt      { get; set; } // datetime
		[Column("UpdatedAt"                           )] public DateTime UpdatedAt      { get; set; } // datetime
		[Column("Title"         , CanBeNull    = false)] public string   Title          { get; set; } = null!; // text(max)
		[Column("Description"                         )] public string?  Description    { get; set; } // text(max)
		[Column("Path"          , CanBeNull    = false)] public string   Path           { get; set; } = null!; // text(max)
		[Column("Position"                            )] public long     Position       { get; set; } // integer
		[Column("ParentFolderId"                      )] public Guid?    ParentFolderId { get; set; } // uniqueidentifier

		#region Associations
		/// <summary>
		/// FK_Memes_0_0
		/// </summary>
		[Association(ThisKey = nameof(ParentFolderId), OtherKey = nameof(Folder.Id))]
		public Folder? ParentFolder { get; set; }

		/// <summary>
		/// FK_MemeTags_1_0 backreference
		/// </summary>
		[Association(ThisKey = nameof(Id), OtherKey = nameof(MemeTag.MemeId))]
		public List<MemeTag> MemeTags { get; set; } = null!;
		#endregion
	}

	[Table("MemeTags")]
	public class MemeTag : DomainEntity
	{
		[Column("Id"    , IsPrimaryKey = true)] public Guid Id     { get; set; } // uniqueidentifier
		[Column("MemeId"                     )] public Guid MemeId { get; set; } // uniqueidentifier
		[Column("TagId"                      )] public Guid TagId  { get; set; } // uniqueidentifier

		#region Associations
		/// <summary>
		/// FK_MemeTags_0_0
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(TagId), OtherKey = nameof(Context.Tag.Id))]
		public Tag Tag { get; set; } = null!;

		/// <summary>
		/// FK_MemeTags_1_0
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(MemeId), OtherKey = nameof(Context.Meme.Id))]
		public Meme Meme { get; set; } = null!;
		#endregion
	}
}
